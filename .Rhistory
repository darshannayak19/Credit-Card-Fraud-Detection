install.packages("caret")
install.packages(c("data.table", "pROC", "xgboost", "randomForest", "glmnet", "rpart", "shapr", "vtreat", "lubridate", "fastDummies"))
library(data.table)
library(pROC)
library(xgboost)
library(randomForest)
library(glmnet)
library(rpart)
library(shapr)
library(vtreat)
library(lubridate)
library(fastDummies)
fraud_test <- fread("C:/Users/mokes/Desktop/adv data mining/fraud test.csv")
# Basic summary and structure
summary(fraud_test)
str(fraud_test)
# Check for missing values
sum(is.na(fraud_test))
# Visualizing distribution of amount and fraud cases
library(ggplot2)
data <- fraud_test
# Plotting histogram
ggplot(data, aes(x = amt)) +
geom_histogram(bins = 30) +
facet_wrap(~is_fraud)
data <- fraud_test
# Plotting histogram
ggplot(data, aes(x = amt)) +
geom_histogram(bins = 30) +
facet_wrap(~is_fraud)
fraud_test <- fread("C:/Users/darsh/Documents/Final_project/fraud test.csv")
# Basic summary and structure
summary(fraud_test)
str(fraud_test)
# Check for missing values
sum(is.na(fraud_test))
library(ggplot2)
data <- fraud_test
# Plotting histogram
ggplot(data, aes(x = amt)) +
geom_histogram(bins = 30) +
facet_wrap(~is_fraud)
# Define feature columns
feature_columns <- c("amt", "zip", "lat", "long", "city_pop")
# Prepare feature matrix
data_processed <- as.matrix(data[, ..feature_columns])
# Extract labels
labels <- data$is_fraud
# Check structure of labels
str(labels)
# Convert labels to a vector if necessary
if (is.function(labels)) {
labels <- as.vector(labels)
}
install.packages("caTools")
library(caTools)
# Split 50:50
half_split <- sample.split(data$is_fraud, SplitRatio = 0.5)
train_data_half <- data[half_split, ]
test_data_half <- data[!half_split, ]
# Split 80:20
eighty_split <- sample.split(data$is_fraud, SplitRatio = 0.8)
train_data_eighty <- data[eighty_split, ]
test_data_eighty <- data[!eighty_split, ]
# Prepare matrices for 50:50 split
train_matrix_half <- as.matrix(train_data_half[, ..feature_columns])
dtrain_half <- xgb.DMatrix(data = train_matrix_half, label = train_data_half$is_fraud)
test_matrix_half <- as.matrix(test_data_half[, ..feature_columns])
dtest_half <- xgb.DMatrix(data = test_matrix_half, label = test_data_half$is_fraud)
# Check for infinite values in numeric columns
numeric_cols <- sapply(fraud_test, is.numeric)
numeric_data <- fraud_test[, numeric_cols, with = FALSE]  # Select only numeric columns
infinite_values <- sapply(numeric_data, function(col) any(!is.finite(col)))
# Assume fraud_test is already a data.table
# Ensure it is defined as names of numeric columns
numeric_cols <- names(fraud_test)[sapply(fraud_test, is.numeric)]
# Check if numeric_cols is populated correctly
print(numeric_cols)
# Assuming fraud_test is a data.table
library(data.table)
setDT(fraud_test)  # Convert to data.table if not already
library(data.table)
setDT(fraud_test)  # Ensure fraud_test is a data.table
# Attempt to replace infinite values with NA in numeric columns
fraud_test[, (numeric_cols) := lapply(.SD, function(col) {
col[is.infinite(col)] <- NA
return(col)
}), .SDcols = numeric_cols]
# Check for any remaining infinite values in numeric columns
any_infinite <- sapply(fraud_test[, ..numeric_cols], function(x) any(is.infinite(x)))
print(any_infinite)
# Convert the resulting list back to a dataframe
numeric_df <- as.data.frame(fraud_test)
# Check for any remaining infinite values
infinite_values <- sapply(numeric_df, function(col) any(is.infinite(col)))
# Print columns with infinite values
print(names(numeric_df)[infinite_values])
# Check the structure of your DataFrame
str(numeric_df)
# Subset the data frame to include only numeric columns
numeric_only_df <- numeric_df[, sapply(numeric_df, is.numeric)]
# Convert the numeric-only DataFrame to a matrix
numeric_matrix <- as.matrix(numeric_only_df)
# Ensure you have the correct labels and they are available as a vector
# Assuming 'fraud_test' is the original data frame and it includes the 'is_fraud' column correctly
labels <- fraud_test$is_fraud
# Create the xgb.DMatrix
dtrain <- xgb.DMatrix(data = numeric_matrix, label = labels)
# Set seed for reproducibility
set.seed(530)
# Prepare feature matrix
data_processed <- as.matrix(data[, feature_columns, with = FALSE])
labels <- data$is_fraud
# Train XGBoost model for 50:50 split
params <- list(objective = "binary:logistic", eval_metric = "auc")
xgb_model_half <- xgb.train(params = params, data = dtrain_half, nrounds = 100)
# Make predictions on test data
predictions <- predict(xgb_model_half, dtest_half)
# Install and load the pROC package
if (!requireNamespace("pROC", quietly = TRUE)) {
install.packages("pROC")
}
library(pROC)
test_labels_half <- test_data_half$is_fraud
# Calculate AUC
auc_score <- auc(roc(test_labels_half, predictions))
# Print AUC score
print(paste("AUC:", auc_score))
# Set seed for reproducibility
set.seed(530)
# Split the data into 80% training and 20% testing
eighty_split <- sample.split(data$is_fraud, SplitRatio = 0.8)
train_data <- data[eighty_split, ]
test_data <- data[!eighty_split, ]
# Prepare matrices for the 80:20 split
train_matrix <- as.matrix(train_data[, feature_columns, with = FALSE])
test_matrix <- as.matrix(test_data[, feature_columns, with = FALSE])
# Extract labels for train and test data
train_labels <- train_data$is_fraud
test_labels <- test_data$is_fraud
# Train XGBoost model for 80:20 split
xgb_model <- xgb.train(params = params, data = xgb.DMatrix(data = train_matrix, label = train_labels), nrounds = 100)
# Make predictions on test data
predictions <- predict(xgb_model, xgb.DMatrix(test_matrix))
# Evaluate model accuracy
accuracy <- mean((predictions > 0.5) == test_labels)
# Print accuracy
print(paste("Accuracy:", accuracy))
predicted_probabilities <- c(0.1, 0.3, 0.2, 0.6, 0.8, 0.7)
true_labels <- c(0, 1, 0, 1, 1, 0)
# Load necessary library
library(pROC)
# Calculate ROC curve
roc_curve <- roc(true_labels, predicted_probabilities)
# Plot ROC curve
plot(roc_curve, main="ROC Curve", col="blue", lwd=2)
# Add diagonal reference line
abline(a=0, b=1, lty=2, col="red")
# Add legend
legend("bottomright", legend=c("ROC Curve", "Random Guess"),
col=c("blue", "red"), lty=1:2, cex=0.8)
